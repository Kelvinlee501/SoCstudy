
TEST?=$(shell if [ -e "${WORKING_DIR}/tb/default.svh" ] ; then cat "${WORKING_DIR}/tb/default.svh"; fi)
TEMPLETE_DIR:=$(PRJ_SCRIPT)/ip_sim/templete

USING_TOOL?="iverilog"

IS_WSL=TRUE
DUMP_EN:=TRUE
WORKING_NAME:=compile

ifeq ($(IS_WSL), TRUE)
	EXE=.exe
endif

VLOG_LIB_SCR:=vlog$(EXE) -work $(WORKING_NAME) -f $(WORKING_DIR)/../RTL/vcode.f -f lib/lib_list.f -logfile comp.lib.log +define+$(USING_TOOL)
VLOG_TB_SCR:=vlog$(EXE) -work $(WORKING_NAME) -sv tb/top.sv -sv tb/incr_top.sv -logfile comp.incr.log +define+$(USING_TOOL)
VLOG_SIM_SCR:=vlog$(EXE) -work $(WORKING_NAME) -f $(WORKING_DIR)/tests/test_list.f -logfile comp.sim.log +define+$(USING_TOOL)
VOPT_TB_SCR:=vopt$(EXE) -work $(WORKING_NAME) $(WORKING_NAME).top $(WORKING_NAME).incr_top -o opt_top -logfile optimize_top.log
ifeq ($(DUMP_EN), TRUE)
	VOPT_TB_SCR+= +acc
endif
VOPT_IP_SCR:=vopt$(EXE) -work $(WORKING_NAME) $(WORKING_NAME).$(WORK_IP) -o opt_$(WORK_IP) -logfile optimize_$(WORK_IP).log
ifeq ($(DUMP_EN), TRUE)
	VOPT_IP_SCR+= +acc
endif


VSIM_SCR:=vsim$(EXE) $(WORKING_NAME).opt_top
ifeq ($(DUMP_EN), TRUE)
	VSIM_SCR+= -voptargs="+acc"
endif
VSIM_SCR+= -logfile sim.log +$(TEST)

VELAB_SCR:=vsim$(EXE) $(WORKING_NAME).opt_$(WORK_IP) -elab $(WORK_IP).lib -c


define HELP_MSG
=============================
Usage : make [option]
Option: clean - clean up
		setup - make directories
		compile - compile
		sim - sim
		run - compile and sim
		gui - run gui of simulator
		wave - waveform
=============================
endef
export HELP_MSG

.PHONY : default help clean setup compile sim rerun wave gui

default : help

help :
	@echo "$$HELP_MSG"

clean : iverilog_clean questa_clean
	@if [ -e sim.log ] ; then \
		rm -f sim.log ; fi;
	@if [ -e dump.vcd ] ; then \
		rm -f dump.vcd ; fi;
	@if [ $(USING_TOOL) != QuestaSim -a $(USING_TOOL) != iverilog ] ; then \
		echo "ERROR : Unknown USING_TOOL"; fi;

iverilog_clean :
	@if [ -e compile.log ] ; then \
		rm -f compile.log ; fi; 
	@if [ -d compile ] ; then \
		rm -rf compile ; fi;

questa_clean :
	@if [ -e comp.lib.log ] ; then \
		rm -f comp.lib.log ; fi; 
	@if [ -e comp.incr.log ] ; then \
		rm -f comp.incr.log ; fi; 
	@if [ -e comp.sim.log ] ; then \
		rm -f comp.sim.log ; fi; 
	@if [ -d "$(WORKING_NAME)" ] ; then \
		rm -rf "$(WORKING_NAME)" ; fi;
	@if [ -e optimize_top.log ] ; then \
		rm -f optimize*.log ; fi;
	@if [ -e transcript ] ; then \
		rm -f transcript ; fi;
	@if [ -e run.tcl ] ; then \
		rm -f run.tcl ; fi;
	@if [ -e vsim.wlf ] ; then \
		rm -f vsim.wlf ; fi;

setup : iverilog_setup questa_setup
	@if [ ! -d tb ] ; then \
		mkdir tb ; fi; 
	@if [ ! -d lib ] ; then \
		mkdir lib ; fi; 
	@if [ ! -d tests ] ; then \
		mkdir tests ; fi; 
	@if [ ! -e tb/sim_param.svh ] ; then \
		cp ${TEMPLETE_DIR}/sim_param.svh tb ; fi; 
	@if [ ! -e tb/default.svh ] ; then \
		cp ${TEMPLETE_DIR}/default.svh tb ; fi; 
	@if [ ! -e lib/monitor.svh ] ; then \
		cp ${TEMPLETE_DIR}/monitor.svh lib ; fi; 
	@if [ ! -e lib/monitor.sv ] ; then \
		cp ${TEMPLETE_DIR}/monitor.sv lib ; fi; 
	@if [ ! -e lib/vip.svh ] ; then \
		cp ${TEMPLETE_DIR}/vip.svh lib ; fi; 
	@if [ ! -e lib/vip.sv ] ; then \
		cp ${TEMPLETE_DIR}/vip.sv lib ; fi; 
	@if [ ! -e lib/vip.sv ] ; then \
		cp ${TEMPLETE_DIR}/vip.sv lib ; fi; 
	@if [ ! -e lib/lib_list.f ] ; then \
		echo "" > lib/lib_list.f ; fi; 
	@if [ ! -e tb/top.sv ] ; then \
		sed s/src_templete/${WORK_IP}/ ${TEMPLETE_DIR}/top.sv > tb/top.sv ; fi;
	@if [ ! -e tb/incr_top.sv ] ; then \
		cp ${TEMPLETE_DIR}/incr_top.sv tb/incr_top.sv ; fi;
	@if [ -z "`find tests -type f`" ] ; then \
		echo $(WORKING_DIR)/tests/test_templete.sv > tests/test_list.f ;\
		cp ${TEMPLETE_DIR}/test_templete.svh tests ; \
		cp ${TEMPLETE_DIR}/test_templete.sv tests ; fi; 

iverilog_setup : 
ifeq ($(USING_TOOL), iverilog)
	@if [ ! -d compile ] ; then \
		mkdir compile ; fi; 
endif

questa_setup : 
ifeq ($(USING_TOOL), QuestaSim)
	@echo "run -all" > run.tcl
	@vlib$(EXE) $(WORKING_NAME)
endif

compile : iverilog_compile questa_compile

iverilog_compile : 
ifeq ($(USING_TOOL), iverilog)
	@if [ ! -e $(WORKING_DIR)/../RTL/vcode.f ] ; then \
		echo "[ERROR] There is not vcode.f" ; \
		echo "[ERROR] There is not vcode.f" > compile.log ;\
	else \
		iverilog -g2012 -o compile/$(WORK_IP).out \
			 tb/top.sv tb/incr_top.sv \
			 -Diverilog \
			 -f tests/test_list.f \
			 -f lib/lib_list.f \
			 -f $(WORKING_DIR)/../RTL/vcode.f \
			 2> compile.log ; \
	fi;
endif

questa_compile :
ifeq ($(USING_TOOL), QuestaSim)
	@$(VLOG_LIB_SCR)
endif

elab : iverilog_elab questa_elab

questa_elab : 
ifeq ($(USING_TOOL), QuestaSim)
	@$(VLOG_TB_SCR)
endif

iverilog_elab :
ifeq ($(USING_TOOL), iverilog)
endif


sim : questa_sim iverilog_sim

questa_sim : 
ifeq ($(USING_TOOL), QuestaSim)
	@$(VLOG_SIM_SCR)
	@$(VOPT_TB_SCR)
	@$(VSIM_SCR) -c -do run.tcl
endif

iverilog_sim :
ifeq ($(USING_TOOL), iverilog)
	@if [ ! -e compile/${WORK_IP}.out ] ; then \
		echo "[ERROR] There is not compile/${WORK_IP}.out" ; \
		echo "[ERROR] There is not compile/${WORK_IP}.out" > sim.log ; \
	else \
		vvp -l sim.log compile/$(WORK_IP).out \
			 +${TEST} ; \
	fi;
endif

run : compile elab sim

gui : 
ifeq ($(USING_TOOL), iverilog)
	echo "[ERROR] iveilog is not support gui"
endif
ifeq ($(USING_TOOL), QuestaSim)
	@$(VSIM_SCR)
endif

wave : 
	@gtkwave dump.vcd &

